
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\005\000\002\002" +
    "\004\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\004\007\000\002\004\006\000\002\004\005\000" +
    "\002\004\005\000\002\004\010\000\002\004\007\000\002" +
    "\004\010\000\002\004\010\000\002\004\015\000\002\004" +
    "\015\000\002\004\006\000\002\004\006\000\002\004\011" +
    "\000\002\004\010\000\002\004\013\000\002\004\006\000" +
    "\002\020\005\000\002\020\005\000\002\020\004\000\002" +
    "\017\005\000\002\017\005\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\016\010\000\002\016\010\000" +
    "\002\016\010\000\002\016\010\000\002\016\010\000\002" +
    "\016\003\000\002\013\007\000\002\013\006\000\002\013" +
    "\003\000\002\014\004\000\002\014\003\000\002\005\005" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\005\000\002\007\003\000\002\007\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\021\005\000" +
    "\002\021\005\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\022\004\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\007\000\002" +
    "\022\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\027\005\001\002\000\004\002\364\001" +
    "\002\000\040\003\021\021\016\030\024\032\022\033\007" +
    "\036\013\043\012\046\023\052\010\054\025\057\017\061" +
    "\027\064\026\065\020\066\014\001\002\000\004\030\363" +
    "\001\002\000\006\021\016\032\022\001\002\000\016\004" +
    "\050\005\055\014\047\021\051\032\053\101\327\001\002" +
    "\000\064\003\021\021\016\030\ufffd\032\022\033\007\036" +
    "\013\040\ufffd\041\ufffd\042\ufffd\043\012\045\ufffd\046\023" +
    "\050\ufffd\052\010\053\ufffd\054\025\055\ufffd\056\ufffd\057" +
    "\017\060\ufffd\061\027\064\026\065\020\066\014\102\ufffd" +
    "\001\002\000\004\032\265\001\002\000\014\004\050\005" +
    "\055\014\047\021\051\032\053\001\002\000\024\004\050" +
    "\005\055\014\047\021\201\032\022\067\176\070\200\071" +
    "\174\072\177\001\002\000\004\031\235\001\002\000\006" +
    "\021\016\032\022\001\002\000\004\032\225\001\002\000" +
    "\024\004\050\005\055\014\047\021\201\032\022\067\176" +
    "\070\200\071\174\072\177\001\002\000\036\003\021\021" +
    "\016\032\022\033\007\036\013\043\012\046\023\052\010" +
    "\054\025\057\017\061\027\064\026\065\020\066\014\001" +
    "\002\000\014\022\uffca\023\167\024\uffca\031\uffca\034\uffca" +
    "\001\002\000\004\032\145\001\002\000\004\002\uffff\001" +
    "\002\000\036\003\021\021\016\032\022\033\007\036\013" +
    "\043\012\046\023\052\010\054\025\057\017\061\027\064" +
    "\026\065\020\066\014\001\002\000\004\032\123\001\002" +
    "\000\004\032\030\001\002\000\040\003\021\021\016\032" +
    "\022\033\007\036\013\043\012\046\023\052\010\054\025" +
    "\057\017\061\027\063\032\064\026\065\020\066\014\001" +
    "\002\000\004\056\117\001\002\000\014\006\036\007\034" +
    "\010\040\011\041\021\033\001\002\000\014\006\036\007" +
    "\034\010\040\011\041\021\033\001\002\000\004\032\uffc2" +
    "\001\002\000\040\003\021\021\016\023\044\032\022\033" +
    "\007\036\013\043\012\046\023\052\010\054\025\057\017" +
    "\061\027\064\026\065\020\066\014\001\002\000\004\032" +
    "\uffc3\001\002\000\004\032\042\001\002\000\004\032\uffc1" +
    "\001\002\000\004\032\uffc0\001\002\000\042\003\uffe9\021" +
    "\uffe9\022\uffe9\023\uffe9\032\uffe9\033\uffe9\036\uffe9\043\uffe9" +
    "\046\uffe9\052\uffe9\054\uffe9\057\uffe9\061\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\001\002\000\004\056\046\001\002\000\014" +
    "\006\036\007\034\010\040\011\041\021\033\001\002\000" +
    "\042\003\uffea\021\uffea\022\uffea\023\044\032\uffea\033\uffea" +
    "\036\uffea\043\uffea\046\uffea\052\uffea\054\uffea\057\uffea\061" +
    "\uffea\064\uffea\065\uffea\066\uffea\001\002\000\014\004\050" +
    "\005\055\014\047\021\051\032\053\001\002\000\012\004" +
    "\050\005\055\014\047\021\064\001\002\000\136\003\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020\uffa6\021" +
    "\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\030\uffa6\032\uffa6" +
    "\033\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060" +
    "\uffa6\061\uffa6\064\uffa6\065\uffa6\066\uffa6\073\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\100\uffa6\102\uffa6\103\uffa6\001" +
    "\002\000\014\004\050\005\055\014\047\021\051\032\053" +
    "\001\002\000\020\024\106\073\104\074\103\075\077\076" +
    "\100\077\105\100\102\001\002\000\114\003\uffb5\021\uffb5" +
    "\022\uffb5\024\uffb5\030\uffb5\032\uffb5\033\uffb5\036\uffb5\037" +
    "\uffb5\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054" +
    "\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\064\uffb5" +
    "\065\uffb5\066\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077" +
    "\uffb5\100\uffb5\102\uffb5\001\002\000\130\003\uffb4\013\063" +
    "\014\056\015\057\016\060\017\061\020\062\021\uffb4\022" +
    "\uffb4\024\uffb4\030\uffb4\032\uffb4\033\uffb4\036\uffb4\037\uffb4" +
    "\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\057\uffb4\060\uffb4\061\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4" +
    "\100\uffb4\102\uffb4\001\002\000\136\003\uffa5\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5" +
    "\023\uffa5\024\uffa5\026\uffa5\030\uffa5\032\uffa5\033\uffa5\036" +
    "\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052\uffa5\053" +
    "\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061\uffa5" +
    "\064\uffa5\065\uffa5\066\uffa5\073\uffa5\074\uffa5\075\uffa5\076" +
    "\uffa5\077\uffa5\100\uffa5\102\uffa5\103\uffa5\001\002\000\012" +
    "\004\050\005\055\014\047\021\064\001\002\000\012\004" +
    "\050\005\055\014\047\021\064\001\002\000\012\004\050" +
    "\005\055\014\047\021\064\001\002\000\004\025\071\001" +
    "\002\000\012\004\050\005\055\014\047\021\064\001\002" +
    "\000\012\004\050\005\055\014\047\021\064\001\002\000" +
    "\012\004\050\005\055\014\047\021\064\001\002\000\136" +
    "\003\uffac\013\uffac\014\uffac\015\057\016\060\017\uffac\020" +
    "\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac\030\uffac" +
    "\032\uffac\033\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\057" +
    "\uffac\060\uffac\061\uffac\064\uffac\065\uffac\066\uffac\073\uffac" +
    "\074\uffac\075\uffac\076\uffac\077\uffac\100\uffac\102\uffac\103" +
    "\uffac\001\002\000\020\013\063\014\056\015\057\016\060" +
    "\017\061\020\062\022\067\001\002\000\136\003\uffa4\013" +
    "\uffa4\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4" +
    "\022\uffa4\023\uffa4\024\uffa4\026\uffa4\030\uffa4\032\uffa4\033" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052" +
    "\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4" +
    "\061\uffa4\064\uffa4\065\uffa4\066\uffa4\073\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\077\uffa4\100\uffa4\102\uffa4\103\uffa4\001\002" +
    "\000\136\003\uffa7\013\uffa7\014\uffa7\015\057\016\060\017" +
    "\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7" +
    "\030\uffa7\032\uffa7\033\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\057\uffa7\060\uffa7\061\uffa7\064\uffa7\065\uffa7\066\uffa7" +
    "\073\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7\100\uffa7\102" +
    "\uffa7\103\uffa7\001\002\000\012\004\050\005\055\014\047" +
    "\021\064\001\002\000\020\013\063\014\056\015\057\016" +
    "\060\017\061\020\062\026\073\001\002\000\136\003\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\020\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\030\uffa8\032\uffa8" +
    "\033\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043" +
    "\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\060" +
    "\uffa8\061\uffa8\064\uffa8\065\uffa8\066\uffa8\073\uffa8\074\uffa8" +
    "\075\uffa8\076\uffa8\077\uffa8\100\uffa8\102\uffa8\103\uffa8\001" +
    "\002\000\136\003\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\020\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026" +
    "\uffa9\030\uffa9\032\uffa9\033\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\064\uffa9\065\uffa9\066" +
    "\uffa9\073\uffa9\074\uffa9\075\uffa9\076\uffa9\077\uffa9\100\uffa9" +
    "\102\uffa9\103\uffa9\001\002\000\136\003\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa\021\uffaa\022\uffaa" +
    "\023\uffaa\024\uffaa\026\uffaa\030\uffaa\032\uffaa\033\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\053" +
    "\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa" +
    "\064\uffaa\065\uffaa\066\uffaa\073\uffaa\074\uffaa\075\uffaa\076" +
    "\uffaa\077\uffaa\100\uffaa\102\uffaa\103\uffaa\001\002\000\136" +
    "\003\uffab\013\uffab\014\uffab\015\057\016\060\017\uffab\020" +
    "\uffab\021\uffab\022\uffab\023\uffab\024\uffab\026\uffab\030\uffab" +
    "\032\uffab\033\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057" +
    "\uffab\060\uffab\061\uffab\064\uffab\065\uffab\066\uffab\073\uffab" +
    "\074\uffab\075\uffab\076\uffab\077\uffab\100\uffab\102\uffab\103" +
    "\uffab\001\002\000\014\004\uffb1\005\uffb1\014\uffb1\021\uffb1" +
    "\032\uffb1\001\002\000\014\004\uffb0\005\uffb0\014\uffb0\021" +
    "\uffb0\032\uffb0\001\002\000\014\004\050\005\055\014\047" +
    "\021\051\032\053\001\002\000\014\004\uffae\005\uffae\014" +
    "\uffae\021\uffae\032\uffae\001\002\000\014\004\uffb2\005\uffb2" +
    "\014\uffb2\021\uffb2\032\uffb2\001\002\000\014\004\uffb3\005" +
    "\uffb3\014\uffb3\021\uffb3\032\uffb3\001\002\000\014\004\uffaf" +
    "\005\uffaf\014\uffaf\021\uffaf\032\uffaf\001\002\000\004\062" +
    "\107\001\002\000\064\003\uffed\021\uffed\030\uffed\032\uffed" +
    "\033\uffed\036\uffed\040\uffed\041\uffed\042\uffed\043\uffed\045" +
    "\uffed\046\uffed\050\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\057\uffed\060\uffed\061\uffed\064\uffed\065\uffed\066" +
    "\uffed\102\uffed\001\002\000\114\003\uffb6\021\uffb6\022\uffb6" +
    "\024\uffb6\030\uffb6\032\uffb6\033\uffb6\036\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6\064\uffb6\065\uffb6" +
    "\066\uffb6\073\104\074\103\075\077\076\100\077\105\100" +
    "\102\102\uffb6\001\002\000\020\022\113\073\104\074\103" +
    "\075\077\076\100\077\105\100\102\001\002\000\034\013" +
    "\063\014\056\015\057\016\060\017\061\020\062\022\067" +
    "\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\001" +
    "\002\000\114\003\uffb7\021\uffb7\022\uffb7\024\uffb7\030\uffb7" +
    "\032\uffb7\033\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042" +
    "\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7" +
    "\051\uffb7\052\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\064\uffb7\065\uffb7\066\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\102\uffb7\001" +
    "\002\000\136\003\uffad\013\uffad\014\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026" +
    "\uffad\030\uffad\032\uffad\033\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad" +
    "\056\uffad\057\uffad\060\uffad\061\uffad\064\uffad\065\uffad\066" +
    "\uffad\073\uffad\074\uffad\075\uffad\076\uffad\077\uffad\100\uffad" +
    "\102\uffad\103\uffad\001\002\000\006\022\116\023\044\001" +
    "\002\000\042\003\uffeb\021\uffeb\022\uffeb\023\uffeb\032\uffeb" +
    "\033\uffeb\036\uffeb\043\uffeb\046\uffeb\052\uffeb\054\uffeb\057" +
    "\uffeb\061\uffeb\064\uffeb\065\uffeb\066\uffeb\001\002\000\014" +
    "\004\050\005\055\014\047\021\051\032\053\001\002\000" +
    "\020\024\121\073\104\074\103\075\077\076\100\077\105" +
    "\100\102\001\002\000\004\062\122\001\002\000\064\003" +
    "\uffef\021\uffef\030\uffef\032\uffef\033\uffef\036\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\045\uffef\046\uffef\050\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef" +
    "\061\uffef\064\uffef\065\uffef\066\uffef\102\uffef\001\002\000" +
    "\024\004\050\005\055\014\047\021\131\032\133\067\125" +
    "\070\126\071\124\072\127\001\002\000\010\022\uffe5\023" +
    "\uffe5\024\uffe5\001\002\000\010\022\uffe2\023\uffe2\024\uffe2" +
    "\001\002\000\010\022\uffe1\023\uffe1\024\uffe1\001\002\000" +
    "\010\022\uffe4\023\uffe4\024\uffe4\001\002\000\006\023\136" +
    "\024\141\001\002\000\024\004\050\005\055\014\047\021" +
    "\131\032\133\067\125\070\126\071\124\072\127\001\002" +
    "\000\024\013\063\014\056\015\057\016\060\017\061\020" +
    "\062\022\uffe6\023\uffe6\024\uffe6\001\002\000\010\022\uffe3" +
    "\023\uffe3\024\uffe3\001\002\000\006\022\137\023\136\001" +
    "\002\000\022\013\063\014\056\015\057\016\060\017\061" +
    "\020\062\022\067\023\uffe6\001\002\000\024\004\050\005" +
    "\055\014\047\021\131\032\133\067\125\070\126\071\124" +
    "\072\127\001\002\000\010\022\uffe8\023\uffe8\024\uffe8\001" +
    "\002\000\010\022\uffe7\023\136\024\uffe7\001\002\000\064" +
    "\003\uffec\021\uffec\030\uffec\032\uffec\033\uffec\036\uffec\040" +
    "\uffec\041\uffec\042\uffec\043\uffec\045\uffec\046\uffec\050\uffec" +
    "\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\064\uffec\065\uffec\066\uffec\102\uffec\001\002" +
    "\000\004\055\143\001\002\000\014\004\050\005\055\014" +
    "\047\021\051\032\053\001\002\000\100\003\ufff1\021\ufff1" +
    "\030\ufff1\032\ufff1\033\ufff1\036\ufff1\040\ufff1\041\ufff1\042" +
    "\ufff1\043\ufff1\045\ufff1\046\ufff1\050\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061\ufff1\064" +
    "\ufff1\065\ufff1\066\ufff1\073\104\074\103\075\077\076\100" +
    "\077\105\100\102\102\ufff1\001\002\000\004\031\146\001" +
    "\002\000\014\004\050\005\055\014\047\021\051\032\053" +
    "\001\002\000\020\047\160\073\104\074\103\075\077\076" +
    "\100\077\105\100\102\001\002\000\034\013\063\014\056" +
    "\015\057\016\060\017\061\020\062\047\151\073\uffb4\074" +
    "\uffb4\075\uffb4\076\uffb4\077\uffb4\100\uffb4\001\002\000\014" +
    "\004\050\005\055\014\047\021\051\032\053\001\002\000" +
    "\020\051\153\073\104\074\103\075\077\076\100\077\105" +
    "\100\102\001\002\000\014\004\050\005\055\014\047\021" +
    "\051\032\053\001\002\000\020\044\155\073\104\074\103" +
    "\075\077\076\100\077\105\100\102\001\002\000\036\003" +
    "\021\021\016\032\022\033\007\036\013\043\012\046\023" +
    "\052\010\054\025\057\017\061\027\064\026\065\020\066" +
    "\014\001\002\000\004\050\157\001\002\000\064\003\ufff3" +
    "\021\ufff3\030\ufff3\032\ufff3\033\ufff3\036\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\045\ufff3\046\ufff3\050\ufff3\052\ufff3" +
    "\053\ufff3\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061" +
    "\ufff3\064\ufff3\065\ufff3\066\ufff3\102\ufff3\001\002\000\014" +
    "\004\050\005\055\014\047\021\051\032\053\001\002\000" +
    "\020\051\162\073\104\074\103\075\077\076\100\077\105" +
    "\100\102\001\002\000\014\004\050\005\055\014\047\021" +
    "\051\032\053\001\002\000\020\044\164\073\104\074\103" +
    "\075\077\076\100\077\105\100\102\001\002\000\036\003" +
    "\021\021\016\032\022\033\007\036\013\043\012\046\023" +
    "\052\010\054\025\057\017\061\027\064\026\065\020\066" +
    "\014\001\002\000\004\050\166\001\002\000\064\003\ufff2" +
    "\021\ufff2\030\ufff2\032\ufff2\033\ufff2\036\ufff2\040\ufff2\041" +
    "\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2\050\ufff2\052\ufff2" +
    "\053\ufff2\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061" +
    "\ufff2\064\ufff2\065\ufff2\066\ufff2\102\ufff2\001\002\000\006" +
    "\021\016\032\022\001\002\000\012\022\uffcb\024\uffcb\031" +
    "\uffcb\034\uffcb\001\002\000\030\030\ufffc\040\ufffc\041\ufffc" +
    "\042\ufffc\045\ufffc\050\ufffc\053\ufffc\055\ufffc\056\ufffc\060" +
    "\ufffc\102\ufffc\001\002\000\006\022\uffd1\024\uffd1\001\002" +
    "\000\004\024\uffd0\001\002\000\006\022\uffd3\024\uffd3\001" +
    "\002\000\004\024\224\001\002\000\010\022\uffbf\024\uffbf" +
    "\103\uffbf\001\002\000\006\022\uffd2\024\uffd2\001\002\000" +
    "\010\022\uffbe\024\uffbe\103\uffbe\001\002\000\024\004\050" +
    "\005\055\014\047\021\201\032\022\067\176\070\200\071" +
    "\174\072\177\001\002\000\034\013\063\014\056\015\057" +
    "\016\060\017\061\020\062\024\uffd4\073\205\074\206\075" +
    "\203\076\210\077\207\100\204\001\002\000\012\004\050" +
    "\005\055\014\047\021\064\001\002\000\012\004\050\005" +
    "\055\014\047\021\064\001\002\000\012\004\050\005\055" +
    "\014\047\021\064\001\002\000\012\004\050\005\055\014" +
    "\047\021\064\001\002\000\012\004\050\005\055\014\047" +
    "\021\064\001\002\000\012\004\050\005\055\014\047\021" +
    "\064\001\002\000\024\013\063\014\056\015\057\016\060" +
    "\017\061\020\062\022\uffba\024\uffba\103\uffba\001\002\000" +
    "\024\013\063\014\056\015\057\016\060\017\061\020\062" +
    "\022\uffb9\024\uffb9\103\uffb9\001\002\000\024\013\063\014" +
    "\056\015\057\016\060\017\061\020\062\022\uffbc\024\uffbc" +
    "\103\uffbc\001\002\000\024\013\063\014\056\015\057\016" +
    "\060\017\061\020\062\022\uffbd\024\uffbd\103\uffbd\001\002" +
    "\000\024\013\063\014\056\015\057\016\060\017\061\020" +
    "\062\022\uffb8\024\uffb8\103\uffb8\001\002\000\024\013\063" +
    "\014\056\015\057\016\060\017\061\020\062\022\uffbb\024" +
    "\uffbb\103\uffbb\001\002\000\004\022\223\001\002\000\004" +
    "\022\222\001\002\000\034\013\063\014\056\015\057\016" +
    "\060\017\061\020\062\022\067\073\205\074\206\075\203" +
    "\076\210\077\207\100\204\001\002\000\006\022\uffd5\024" +
    "\uffd5\001\002\000\012\022\uffc9\024\uffc9\031\uffc9\034\uffc9" +
    "\001\002\000\064\003\ufff8\021\ufff8\030\ufff8\032\ufff8\033" +
    "\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\045\ufff8" +
    "\046\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\102\ufff8\001\002\000\040\003\021\021\016\032\022\033" +
    "\007\036\013\043\012\046\023\052\010\054\025\057\017" +
    "\061\027\063\227\064\026\065\020\066\014\001\002\000" +
    "\004\060\233\001\002\000\014\006\036\007\034\010\040" +
    "\011\041\021\033\001\002\000\040\003\021\021\016\023" +
    "\044\032\022\033\007\036\013\043\012\046\023\052\010" +
    "\054\025\057\017\061\027\064\026\065\020\066\014\001" +
    "\002\000\004\060\232\001\002\000\064\003\uffee\021\uffee" +
    "\030\uffee\032\uffee\033\uffee\036\uffee\040\uffee\041\uffee\042" +
    "\uffee\043\uffee\045\uffee\046\uffee\050\uffee\052\uffee\053\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\064" +
    "\uffee\065\uffee\066\uffee\102\uffee\001\002\000\064\003\ufff0" +
    "\021\ufff0\030\ufff0\032\ufff0\033\ufff0\036\ufff0\040\ufff0\041" +
    "\ufff0\042\ufff0\043\ufff0\045\ufff0\046\ufff0\050\ufff0\052\ufff0" +
    "\053\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\102\ufff0\001\002\000\004" +
    "\022\223\001\002\000\024\004\050\005\055\014\047\021" +
    "\051\032\053\067\176\070\200\071\237\072\241\001\002" +
    "\000\004\024\uffcc\001\002\000\004\024\uffce\001\002\000" +
    "\020\024\uffcf\073\104\074\103\075\077\076\100\077\105" +
    "\100\102\001\002\000\004\024\uffcd\001\002\000\004\024" +
    "\244\001\002\000\034\013\063\014\056\015\057\016\060" +
    "\017\061\020\062\024\uffb4\073\205\074\206\075\203\076" +
    "\210\077\207\100\204\001\002\000\064\003\ufffa\021\ufffa" +
    "\030\ufffa\032\ufffa\033\ufffa\036\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\045\ufffa\046\ufffa\050\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\064" +
    "\ufffa\065\ufffa\066\ufffa\102\ufffa\001\002\000\004\024\246" +
    "\001\002\000\064\003\ufff9\021\ufff9\030\ufff9\032\ufff9\033" +
    "\ufff9\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\045\ufff9" +
    "\046\ufff9\050\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056" +
    "\ufff9\057\ufff9\060\ufff9\061\ufff9\064\ufff9\065\ufff9\066\ufff9" +
    "\102\ufff9\001\002\000\020\037\250\073\104\074\103\075" +
    "\077\076\100\077\105\100\102\001\002\000\036\003\021" +
    "\021\016\032\022\033\007\036\013\043\012\046\023\052" +
    "\010\054\025\057\017\061\027\064\026\065\020\066\014" +
    "\001\002\000\006\040\253\041\252\001\002\000\044\003" +
    "\021\021\016\032\022\033\007\036\013\041\uffd6\042\uffd6" +
    "\043\012\045\uffd6\046\023\052\010\054\025\057\017\061" +
    "\027\064\026\065\020\066\014\001\002\000\014\004\050" +
    "\005\055\014\047\021\051\032\053\001\002\000\004\042" +
    "\uffd8\001\002\000\004\042\256\001\002\000\064\003\ufff7" +
    "\021\ufff7\030\ufff7\032\ufff7\033\ufff7\036\ufff7\040\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\045\ufff7\046\ufff7\050\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061" +
    "\ufff7\064\ufff7\065\ufff7\066\ufff7\102\ufff7\001\002\000\020" +
    "\037\260\073\104\074\103\075\077\076\100\077\105\100" +
    "\102\001\002\000\042\003\021\021\016\032\022\033\007" +
    "\036\013\040\253\041\252\043\012\046\023\052\010\054" +
    "\025\057\017\061\027\064\026\065\020\066\014\001\002" +
    "\000\006\040\253\041\252\001\002\000\004\042\uffd9\001" +
    "\002\000\004\042\uffda\001\002\000\010\041\uffd7\042\uffd7" +
    "\045\uffd7\001\002\000\004\044\266\001\002\000\006\041" +
    "\252\102\267\001\002\000\024\004\050\005\055\014\047" +
    "\021\064\032\300\067\176\070\200\071\275\072\276\001" +
    "\002\000\004\041\uffdb\001\002\000\004\041\252\001\002" +
    "\000\004\045\273\001\002\000\064\003\ufff4\021\ufff4\030" +
    "\ufff4\032\ufff4\033\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4" +
    "\043\ufff4\045\ufff4\046\ufff4\050\ufff4\052\ufff4\053\ufff4\054" +
    "\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\102\ufff4\001\002\000\004\103\321\001" +
    "\002\000\004\103\315\001\002\000\004\103\311\001\002" +
    "\000\034\013\063\014\056\015\057\016\060\017\061\020" +
    "\062\073\205\074\206\075\203\076\210\077\207\100\204" +
    "\103\305\001\002\000\004\103\301\001\002\000\004\037" +
    "\302\001\002\000\036\003\021\021\016\032\022\033\007" +
    "\036\013\043\012\046\023\052\010\054\025\057\017\061" +
    "\027\064\026\065\020\066\014\001\002\000\006\041\252" +
    "\102\267\001\002\000\004\041\uffdd\001\002\000\004\037" +
    "\306\001\002\000\036\003\021\021\016\032\022\033\007" +
    "\036\013\043\012\046\023\052\010\054\025\057\017\061" +
    "\027\064\026\065\020\066\014\001\002\000\006\041\252" +
    "\102\267\001\002\000\004\041\uffe0\001\002\000\004\037" +
    "\312\001\002\000\036\003\021\021\016\032\022\033\007" +
    "\036\013\043\012\046\023\052\010\054\025\057\017\061" +
    "\027\064\026\065\020\066\014\001\002\000\006\041\252" +
    "\102\267\001\002\000\004\041\uffde\001\002\000\004\037" +
    "\316\001\002\000\036\003\021\021\016\032\022\033\007" +
    "\036\013\043\012\046\023\052\010\054\025\057\017\061" +
    "\027\064\026\065\020\066\014\001\002\000\006\041\252" +
    "\102\267\001\002\000\004\041\uffdf\001\002\000\004\037" +
    "\322\001\002\000\036\003\021\021\016\032\022\033\007" +
    "\036\013\043\012\046\023\052\010\054\025\057\017\061" +
    "\027\064\026\065\020\066\014\001\002\000\006\041\252" +
    "\102\267\001\002\000\004\041\uffdc\001\002\000\030\030" +
    "\ufffe\040\ufffe\041\ufffe\042\ufffe\045\ufffe\050\ufffe\053\ufffe" +
    "\055\ufffe\056\ufffe\060\ufffe\102\ufffe\001\002\000\020\044" +
    "\334\073\104\074\103\075\077\076\100\077\105\100\102" +
    "\001\002\000\014\004\050\005\055\014\047\021\051\032" +
    "\053\001\002\000\020\044\331\073\104\074\103\075\077" +
    "\076\100\077\105\100\102\001\002\000\036\003\021\021" +
    "\016\032\022\033\007\036\013\043\012\046\023\052\010" +
    "\054\025\057\017\061\027\064\026\065\020\066\014\001" +
    "\002\000\004\053\333\001\002\000\064\003\ufff5\021\ufff5" +
    "\030\ufff5\032\ufff5\033\ufff5\036\ufff5\040\ufff5\041\ufff5\042" +
    "\ufff5\043\ufff5\045\ufff5\046\ufff5\050\ufff5\052\ufff5\053\ufff5" +
    "\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\102\ufff5\001\002\000\036\003\021" +
    "\021\016\032\022\033\007\036\013\043\012\046\023\052" +
    "\010\054\025\057\017\061\027\064\026\065\020\066\014" +
    "\001\002\000\004\053\336\001\002\000\064\003\ufff6\021" +
    "\ufff6\030\ufff6\032\ufff6\033\ufff6\036\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\045\ufff6\046\ufff6\050\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6" +
    "\064\ufff6\065\ufff6\066\ufff6\102\ufff6\001\002\000\004\034" +
    "\340\001\002\000\012\006\343\007\341\010\345\011\346" +
    "\001\002\000\004\035\361\001\002\000\004\035\357\001" +
    "\002\000\004\035\355\001\002\000\004\024\354\001\002" +
    "\000\004\035\351\001\002\000\004\035\347\001\002\000" +
    "\004\072\350\001\002\000\004\024\uffc5\001\002\000\016" +
    "\004\050\005\055\014\047\021\064\067\176\070\200\001" +
    "\002\000\032\013\063\014\056\015\057\016\060\017\061" +
    "\020\062\073\205\074\206\075\203\076\210\077\207\100" +
    "\204\001\002\000\004\024\uffc6\001\002\000\064\003\ufffb" +
    "\021\ufffb\030\ufffb\032\ufffb\033\ufffb\036\ufffb\040\ufffb\041" +
    "\ufffb\042\ufffb\043\ufffb\045\ufffb\046\ufffb\050\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061" +
    "\ufffb\064\ufffb\065\ufffb\066\ufffb\102\ufffb\001\002\000\012" +
    "\004\050\005\055\014\047\021\064\001\002\000\020\013" +
    "\063\014\056\015\057\016\060\017\061\020\062\024\uffc8" +
    "\001\002\000\014\004\050\005\055\014\047\021\051\032" +
    "\053\001\002\000\020\024\uffc4\073\104\074\103\075\077" +
    "\076\100\077\105\100\102\001\002\000\004\071\362\001" +
    "\002\000\004\024\uffc7\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\003\005\004\010\007\014\001\001\000\002\001\001" +
    "\000\004\007\336\001\001\000\006\011\325\022\053\001" +
    "\001\000\010\003\324\004\010\007\014\001\001\000\002" +
    "\001\001\000\006\011\246\022\053\001\001\000\012\005" +
    "\244\007\172\015\171\022\201\001\001\000\002\001\001" +
    "\000\004\007\233\001\001\000\002\001\001\000\012\005" +
    "\174\007\172\015\171\022\201\001\001\000\010\003\170" +
    "\004\010\007\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\141\004\010\007\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\030\004\010\007\014\001\001\000\002\001\001\000\006" +
    "\010\036\020\034\001\001\000\006\010\036\020\114\001" +
    "\001\000\002\001\001\000\010\003\042\004\010\007\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\036\020\044\001\001\000\002\001\001\000" +
    "\006\011\051\022\053\001\001\000\004\022\113\001\001" +
    "\000\002\001\001\000\006\011\110\022\111\001\001\000" +
    "\004\012\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\075\001\001\000\004\022" +
    "\074\001\001\000\004\022\073\001\001\000\002\001\001" +
    "\000\004\022\067\001\001\000\004\022\064\001\001\000" +
    "\004\022\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\107\022\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\100" +
    "\001\001\000\004\012\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\117\022\053\001\001\000\004\012" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\127\022\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\133\022\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\137\022\131\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\143" +
    "\022\053\001\001\000\004\012\100\001\001\000\002\001" +
    "\001\000\006\011\146\022\147\001\001\000\004\012\100" +
    "\001\001\000\002\001\001\000\006\011\151\022\053\001" +
    "\001\000\004\012\100\001\001\000\006\011\153\022\053" +
    "\001\001\000\004\012\100\001\001\000\010\003\155\004" +
    "\010\007\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\160\022\053\001\001\000\004\012\100\001" +
    "\001\000\006\011\162\022\053\001\001\000\004\012\100" +
    "\001\001\000\010\003\164\004\010\007\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\167\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\005" +
    "\217\007\216\015\171\022\220\001\001\000\002\001\001" +
    "\000\004\022\215\001\001\000\004\022\214\001\001\000" +
    "\004\022\213\001\001\000\004\022\212\001\001\000\004" +
    "\022\211\001\001\000\004\022\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\003\225\004\010\007" +
    "\014\001\001\000\002\001\001\000\006\010\036\020\227" +
    "\001\001\000\010\003\230\004\010\007\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\241\011\237\015\235\022\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\100\001\001\000\010\003\250\004\010\007" +
    "\014\001\001\000\006\013\254\014\253\001\001\000\010" +
    "\003\263\004\010\007\014\001\001\000\006\011\256\022" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\100\001\001\000\014\003\260\004" +
    "\010\007\014\013\261\014\253\001\001\000\006\013\262" +
    "\014\253\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\267\016\270" +
    "\001\001\000\006\015\273\022\276\001\001\000\002\001" +
    "\001\000\004\014\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\302\004\010\007\014\001\001\000\006\014" +
    "\267\016\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\306\004\010\007\014\001\001\000\006\014" +
    "\267\016\307\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\312\004\010\007\014\001\001\000\006\014" +
    "\267\016\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\316\004\010\007\014\001\001\000\006\014" +
    "\267\016\317\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\322\004\010\007\014\001\001\000\006\014" +
    "\267\016\323\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\100\001\001\000\006\011\327\022\053\001" +
    "\001\000\004\012\100\001\001\000\010\003\331\004\010" +
    "\007\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\334\004\010\007\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\341\021" +
    "\343\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\015\352" +
    "\022\351\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\355\001\001\000\002\001\001" +
    "\000\006\011\357\022\053\001\001\000\004\012\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public LinkedList<String> tokens = new LinkedList<String>();

    public void syntax_error(Symbol s){
        System.out.println("Error linea: " + s.left + " columna: " +s.right+" Value:   " + s.value);                   
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error linea irrecuperable: " + s.left + "columna: " +s.right+"value:" + s.value);                
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ini ::= INICIO instrucciones FIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ini ::= INICIO FIN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instrucciones ::= instruccion 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instrucciones ::= error instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= INGRESAR id COMO D_Tipo PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= id ASSIGN assignables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= PRINTLN printables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= PRINT printables PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= IF logic SO instrucciones elif_statements IFCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= WHILE logic DO instrucciones WHILECLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= WHILE INVERSE logic DO instrucciones WHILECLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= SWITCH IDENTIFICADOR DO s_cases else_statements SWITCHCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= FOR IDENTIFICADOR ASSIGN math UNTIL logic INCREMENT logic DO instrucciones FORCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= FOR IDENTIFICADOR ASSIGN logic UNTIL logic INCREMENT logic DO instrucciones FORCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= REPEAT instrucciones UNTIL_CONDITION logic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= METOD IDENTIFICADOR instrucciones METODCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= FUN IDENTIFICADOR instrucciones RETURN logic PUNTOCOMA FUNCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= METOD IDENTIFICADOR PARAMETERS pars instrucciones METODCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= FUN IDENTIFICADOR PARAMETERS pars instrucciones RETURN logic PUNTOCOMA FUNCLOSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= EXECUTE IDENTIFICADOR args PUNTOCOMA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pars ::= PARENABRE pars PARENCIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pars",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pars ::= pars COMA pars 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pars",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pars ::= only_type IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("pars",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // args ::= PARENABRE args PARENCIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // args ::= args COMA args 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // args ::= math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // args ::= STRING_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // args ::= CHAR_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // args ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // args ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // args ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("args",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // s_cases ::= OPENCASE math CLOSECASE SO instrucciones s_cases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s_cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // s_cases ::= OPENCASE STRING_CONTENT CLOSECASE SO instrucciones s_cases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s_cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // s_cases ::= OPENCASE CHAR_CONTENT CLOSECASE SO instrucciones s_cases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s_cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // s_cases ::= OPENCASE IDENTIFICADOR CLOSECASE SO instrucciones s_cases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s_cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // s_cases ::= OPENCASE bool_test CLOSECASE SO instrucciones s_cases 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s_cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // s_cases ::= else_statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("s_cases",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // elif_statements ::= ELIF logic SO instrucciones elif_statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elif_statements",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // elif_statements ::= ELIF logic SO elif_statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elif_statements",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // elif_statements ::= else_statements 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("elif_statements",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // else_statements ::= ELSE instrucciones 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_statements",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // else_statements ::= ELSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("else_statements",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // printables ::= PARENABRE printables PARENCIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("printables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // printables ::= math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("printables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // printables ::= STRING_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("printables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // printables ::= CHAR_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("printables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // printables ::= bool_test 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("printables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // printables ::= id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("printables",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // assignables ::= logic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assignables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // assignables ::= STRING_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assignables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // assignables ::= CHAR_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assignables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // assignables ::= bool_test 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("assignables",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // id ::= IDENTIFICADOR COMA id 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // id ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // id ::= PARENABRE id PARENCIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("id",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // D_Tipo ::= INTVALUE CON_VALOR math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D_Tipo",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // D_Tipo ::= STRING CON_VALOR STRING_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D_Tipo",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // D_Tipo ::= BOOLEAN CON_VALOR bool_test 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D_Tipo",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // D_Tipo ::= CHAR CON_VALOR CHAR_CONTENT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D_Tipo",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // D_Tipo ::= only_type CON_VALOR logic 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("D_Tipo",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // only_type ::= INTVALUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("only_type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // only_type ::= STRING 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("only_type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // only_type ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("only_type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // only_type ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("only_type",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bool_test ::= TRUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bool_test ::= FALSE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bool_test ::= math MENORQUE math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bool_test ::= math MAYORQUE math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bool_test ::= math MENORIGUAL math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bool_test ::= math MAYORIGUAL math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bool_test ::= math ESIGUAL math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bool_test ::= math NOESIGUAL math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("bool_test",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logic ::= PARENABRE logic PARENCIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logic",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logic ::= logic operators logic 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logic",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logic ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logic",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logic ::= math 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("logic",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operators ::= MENORQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operators",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operators ::= MAYORQUE 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operators",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operators ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operators",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operators ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operators",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operators ::= ESIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operators",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operators ::= NOESIGUAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("operators",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // math ::= RESTA math 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*-1;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // math ::= math SUMA math 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // math ::= math RESTA math 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a-b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // math ::= math MULT math 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a*b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // math ::= math DIVD math 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a/b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // math ::= math POTENCIA CORCABRE math CORCCIERRA 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT= Math.pow(a, b);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // math ::= math MODULO math 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a%b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // math ::= NUMERO 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Double(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // math ::= DECIMAL 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=new Double(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // math ::= PARENABRE math PARENCIERRA 
            {
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT=new Double(a);
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("math",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
