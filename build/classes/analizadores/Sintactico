package analizadores;

import java_cup.runtime.*;
import java.util.LinkedList;

parser code {:
    public LinkedList<String> tokens = new LinkedList<String>();

    public void syntax_error(Symbol s){
        System.out.println("Error linea: " + s.left + " columna: " +s.right+" Value:   " + s.value);                   
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error linea irrecuperable: " + s.left + "columna: " +s.right+"value:" + s.value);                
    }
:}

terminal String NUMERO, DECIMAL, INTVALUE, STRING, BOOLEAN, CHAR, UMENOS;
terminal String SUMA, RESTA, MULT, DIVD, POTENCIA, MODULO, PARENABRE, PARENCIERRA;
terminal String COMA, PUNTOCOMA, CORCABRE, CORCCIERRA, INICIO, FIN, ASSIGN;
terminal String IDENTIFICADOR, INGRESAR, COMO, CON_VALOR, IF, SO, ELIF, ELSE, IFCLOSE, SWITCH, DO, SWITCHCLOSE;
terminal String FOR, UNTIL, FORCLOSE, INCREMENT, WHILE, WHILECLOSE, REPEAT, UNTIL_CONDITION, RETURN;
terminal String METOD, METODCLOSE, FUN, FUNCLOSE, PARAMETERS, EXECUTE, PRINT, PRINTLN;
terminal String TRUE, FALSE, STRING_CONTENT, CHAR_CONTENT, MENORQUE, MAYORQUE, MENORIGUAL, MAYORIGUAL, ESIGUAL, NOESIGUAL, INVERSE;
terminal String OPENCASE, CLOSECASE;

non terminal ini;
non terminal instrucciones;
non terminal instruccion;
non terminal printables;
non terminal assignables;
non terminal id;
non terminal only_type;
non terminal logic;
non terminal operators;
non terminal elif_statements;
non terminal else_statements;
non terminal bool_test;
non terminal s_cases;
non terminal args;
non terminal pars;
non terminal D_Tipo;
non terminal Double math;

precedence left SUMA, RESTA, POTENCIA, MODULO;
precedence left MULT,DIVD;
precedence left MENORQUE, MAYORQUE, MENORQUE, MAYORQUE, MENORIGUAL, MAYORIGUAL, ESIGUAL, NOESIGUAL, PARENCIERRA, CLOSECASE, CORCCIERRA, error;
precedence left FIN, IFCLOSE, SWITCHCLOSE, FORCLOSE, WHILECLOSE, METODCLOSE, FUNCLOSE;
precedence left PUNTOCOMA;
precedence right UMENOS, INICIO, INGRESAR, IF, SWITCH, FOR, WHILE, REPEAT, METOD, FUN, EXECUTE, PRINT, PRINTLN, CON_VALOR, UNTIL; 
precedence right PARENABRE, IDENTIFICADOR, OPENCASE, CORCABRE, COMA, RETURN, UNTIL_CONDITION;

start with ini;

ini ::= INICIO instrucciones FIN
    | INICIO FIN
;

instrucciones ::=  instruccion instrucciones 
| instruccion 
| error instrucciones {:tokens.add("error");:}
;

instruccion ::= INGRESAR id COMO D_Tipo PUNTOCOMA
    | id ASSIGN assignables PUNTOCOMA
    | PRINTLN printables PUNTOCOMA
    | PRINT printables PUNTOCOMA
    | IF logic SO instrucciones elif_statements IFCLOSE
    | WHILE logic DO instrucciones WHILECLOSE
    | WHILE INVERSE logic DO  instrucciones WHILECLOSE
    | SWITCH IDENTIFICADOR DO s_cases else_statements SWITCHCLOSE 
    | FOR IDENTIFICADOR ASSIGN math UNTIL logic INCREMENT logic DO instrucciones FORCLOSE
    | FOR IDENTIFICADOR ASSIGN logic UNTIL logic INCREMENT logic DO instrucciones FORCLOSE
    | REPEAT instrucciones UNTIL_CONDITION logic
    | METOD IDENTIFICADOR instrucciones METODCLOSE
    | FUN IDENTIFICADOR instrucciones RETURN logic PUNTOCOMA FUNCLOSE
    | METOD IDENTIFICADOR PARAMETERS pars instrucciones METODCLOSE
    | FUN IDENTIFICADOR PARAMETERS pars instrucciones RETURN logic PUNTOCOMA FUNCLOSE
    | EXECUTE IDENTIFICADOR args PUNTOCOMA
;

pars ::=  PARENABRE pars PARENCIERRA
    | pars COMA pars
    | only_type IDENTIFICADOR 
;

args ::= PARENABRE args PARENCIERRA
    | args COMA args
    | math
    | STRING_CONTENT
    | CHAR_CONTENT
    | IDENTIFICADOR
    | TRUE
    | FALSE
;

s_cases ::= OPENCASE math CLOSECASE SO instrucciones s_cases 
    | OPENCASE STRING_CONTENT CLOSECASE SO instrucciones s_cases 
    | OPENCASE CHAR_CONTENT CLOSECASE SO instrucciones s_cases 
    | OPENCASE IDENTIFICADOR CLOSECASE SO instrucciones s_cases 
    | OPENCASE bool_test CLOSECASE SO instrucciones s_cases 
    | else_statements
;

elif_statements ::= ELIF logic SO instrucciones elif_statements
    | ELIF logic SO elif_statements
    | else_statements
;

else_statements ::= ELSE instrucciones
    | ELSE
;

printables ::= PARENABRE printables PARENCIERRA
    | math
    | STRING_CONTENT
    | CHAR_CONTENT
    | bool_test
    | id
;

assignables ::= logic
    | STRING_CONTENT
    | CHAR_CONTENT
    | bool_test
;

id ::= IDENTIFICADOR COMA id
    | IDENTIFICADOR
    | PARENABRE id PARENCIERRA
;

D_Tipo ::= INTVALUE CON_VALOR math
    | STRING CON_VALOR STRING_CONTENT
    | BOOLEAN CON_VALOR bool_test
    | CHAR CON_VALOR CHAR_CONTENT
    | only_type CON_VALOR logic
;

only_type ::= INTVALUE
    | STRING
    | BOOLEAN
    | CHAR
;

bool_test ::= TRUE 
    | FALSE
    | math MENORQUE math
    | math MAYORQUE math
    | math MENORIGUAL math
    | math MAYORIGUAL math
    | math ESIGUAL math
    | math NOESIGUAL math
;

logic ::= PARENABRE logic:a PARENCIERRA {:RESULT=a;:}
    | logic:a operators logic:b
    | IDENTIFICADOR
    | math
;

math  ::= 
    RESTA math:a             {:RESULT=a*-1;:}%prec UMENOS     
 |  math:a SUMA   math:b     {:RESULT=a+b;:}
 |  math:a RESTA  math:b     {:RESULT=a-b;:}
 |  math:a MULT   math:b     {:RESULT=a*b;:}
 |  math:a DIVD   math:b     {:RESULT=a/b;:}
 |  math:a POTENCIA CORCABRE math:b CORCCIERRA {:RESULT= Math.pow(a, b);:}
 |  math:a MODULO math:b {:RESULT=a%b;:}
 |  NUMERO:a                               {:RESULT=new Double(a);:}
 |  DECIMAL:a                              {:RESULT=new Double(a);:}
 |  PARENABRE math:a PARENCIERRA              {:RESULT=new Double(a);:}
;

operators::= MENORQUE
    | MAYORQUE 
    | MENORIGUAL 
    | MAYORIGUAL 
    | ESIGUAL 
    | NOESIGUAL
;